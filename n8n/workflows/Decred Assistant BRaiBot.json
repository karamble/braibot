{"createdAt":"2025-05-11T08:43:41.318Z","updatedAt":"2025-05-23T09:29:11.197Z","id":"gkt4U8GXDn2OqXEY","name":"Decred Assistant BRaiBot","active":true,"isArchived":false,"nodes":[{"parameters":{},"type":"n8n-nodes-base.manualTrigger","typeVersion":1,"position":[-1280,-100],"id":"af260c86-04ab-4938-859a-ad34d26abb4e","name":"When clicking ‘Test workflow’"},{"parameters":{"jsCode":"// Function to remove the prefix from the directory\nfunction removePrefix(directory) {\n  const prefix = \"/data/shared/dcps\"; // No trailing slash\n  // Ensure directory is a string and not null/undefined\n  if (typeof directory !== 'string' || !directory) {\n    console.log('Invalid directory:', directory);\n    return '';\n  }\n  // Normalize directory and prefix (handle multiple slashes, whitespace)\n  const normalizedDirectory = directory.replace(/\\/+/g, '/').trim();\n  const normalizedPrefix = prefix.replace(/\\/+/g, '/').trim();\n  console.log('Input directory:', directory);\n  console.log('Normalized directory:', normalizedDirectory);\n  console.log('Normalized prefix:', normalizedPrefix);\n  \n  if (normalizedDirectory.startsWith(normalizedPrefix)) {\n    const result = normalizedDirectory.slice(normalizedPrefix.length).replace(/^\\/+/, '');\n    console.log('Prefix removed, result:', result);\n    return result;\n  }\n  console.log('Prefix not found, returning:', normalizedDirectory);\n  return normalizedDirectory;\n}\n\n// Log FileLoop node output for debugging\nconsole.log('FileLoop item output:', JSON.stringify($('FileLoop').item, null, 2));\nconsole.log('FileLoop first output:', JSON.stringify($('FileLoop').first(), null, 2));\n\n// Process input items in n8n\nconst items = $input.all() || [];\nfor (const item of items) {\n  // Initialize item.json for output\n  item.json = item.json || {};\n\n  \n  // Check if json fields exist\n  if (item.json) {\n    // Use directory from FileLoop node's current item\n    const directory = removePrefix($('FileLoop').item?.binary?.data?.directory || '');\n    // Use filename from FileLoop node's first output, fallback to item.json.fileName\n    const fileName = $('FileLoop').first()?.json?.fileName || item.json.fileName || '';\n    console.log('Directory after prefix removal:', directory, 'FileName:', fileName);\n    \n    // Construct weblink with correct URL and slash normalization\n    if (directory || fileName) {\n      const path = directory ? `${directory}/${fileName}` : fileName;\n      item.json.weblink = `https://github.com/decred/dcps/blob/master/${path}`.replace(/\\/+/g, '/').replace(/\\/$/, '');\n    } else {\n      console.log('No directory or fileName, setting default weblink');\n      item.json.weblink = 'https://github.com/decred/dcps/blob/master/';\n    }\n  } else {\n    console.log('Missing json:', item);\n    item.json.weblink = 'https://github.com/decred/dcps/blob/master/';\n  }\n}\n\nreturn items;"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-180,-740],"id":"c01dc6cc-d110-4a6c-a3cf-57bd64250f71","name":"DCP"},{"parameters":{"jsCode":"// Function to remove the prefix from the directory\nfunction removePrefix(directory) {\n  const prefix = \"/data/shared/dcrdevdocs\"; // No trailing slash\n  // Ensure directory is a string and not null/undefined\n  if (typeof directory !== 'string' || !directory) {\n    console.log('Invalid directory:', directory);\n    return '';\n  }\n  // Normalize directory and prefix (handle multiple slashes, whitespace)\n  const normalizedDirectory = directory.replace(/\\/+/g, '/').trim();\n  const normalizedPrefix = prefix.replace(/\\/+/g, '/').trim();\n  console.log('Input directory:', directory);\n  console.log('Normalized directory:', normalizedDirectory);\n  console.log('Normalized prefix:', normalizedPrefix);\n  \n  if (normalizedDirectory.startsWith(normalizedPrefix)) {\n    const result = normalizedDirectory.slice(normalizedPrefix.length).replace(/^\\/+/, '');\n    console.log('Prefix removed, result:', result);\n    return result;\n  }\n  console.log('Prefix not found, returning:', normalizedDirectory);\n  return normalizedDirectory;\n}\n\n// Function to remove file extension and handle index.md\nfunction processFileName(fileName) {\n  if (typeof fileName !== 'string' || !fileName) {\n    return '';\n  }\n  // Remove extension (e.g., .md, .mediawiki)\n  const baseName = fileName.replace(/\\.[^/.]+$/, '');\n  // Return empty string for index.md\n  return baseName.toLowerCase() === 'index' ? '' : baseName;\n}\n\n// Log FileLoop node output for debugging\nconsole.log('FileLoop item output:', JSON.stringify($('FileLoop').item, null, 2));\nconsole.log('FileLoop first output:', JSON.stringify($('FileLoop').first(), null, 2));\n\n// Process input items in n8n\nconst items = $input.all() || [];\nfor (const item of items) {\n  // Initialize item.json for output\n  item.json = item.json || {};\n  \n  // Log the entire item for debugging\n  console.log('Item:', JSON.stringify(item, null, 2));\n  \n  // Check if json fields exist\n  if (item.json) {\n    // Use directory from FileLoop node's current item\n    const directory = removePrefix($('FileLoop').item?.binary?.data?.directory || '');\n    // Use filename from FileLoop node's first output, fallback to item.json.fileName\n    const fileName = processFileName($('FileLoop').first()?.json?.fileName || item.json.fileName || '');\n    console.log('Directory after prefix removal:', directory, 'FileName (processed):', fileName);\n    \n    // Construct weblink with correct URL and trailing slash\n    if (directory || fileName) {\n      // If fileName is empty (e.g., index.md), use directory only; otherwise, include fileName\n      const path = fileName ? `${directory}/${fileName}` : directory;\n      item.json.weblink = `https://devdocs.decred.org/${path}/`.replace(/\\/+/g, '/');\n    } else {\n      console.log('No directory or fileName, setting default weblink');\n      item.json.weblink = 'https://devdocs.decred.org/';\n    }\n  } else {\n    console.log('Missing json:', item);\n    item.json.weblink = 'https://devdocs.decred.org/';\n  }\n}\n\nreturn items;"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-180,-580],"id":"38202653-ddae-48fd-a590-569940df569c","name":"devDocs"},{"parameters":{"jsCode":"// Function to remove the prefix from the directory\nfunction removePrefix(directory) {\n  const prefix = \"/data/shared/dcrdex\"; // No trailing slash\n  // Ensure directory is a string and not null/undefined\n  if (typeof directory !== 'string' || !directory) {\n    console.log('Invalid directory:', directory);\n    return '';\n  }\n  // Normalize directory and prefix (handle multiple slashes, whitespace)\n  const normalizedDirectory = directory.replace(/\\/+/g, '/').trim();\n  const normalizedPrefix = prefix.replace(/\\/+/g, '/').trim();\n  console.log('Input directory:', directory);\n  console.log('Normalized directory:', normalizedDirectory);\n  console.log('Normalized prefix:', normalizedPrefix);\n  \n  if (normalizedDirectory.startsWith(normalizedPrefix)) {\n    const result = normalizedDirectory.slice(normalizedPrefix.length).replace(/^\\/+/, '');\n    console.log('Prefix removed, result:', result);\n    return result;\n  }\n  console.log('No prefix matched, returning:', normalizedDirectory);\n  return normalizedDirectory;\n}\n\n// Log FileLoop node output for debugging\nconsole.log('FileLoop item output:', JSON.stringify($('FileLoop').item, null, 2));\nconsole.log('FileLoop first output:', JSON.stringify($('FileLoop').first(), null, 2));\n\n// Process input items in n8n\nconst items = $input.all() || [];\nfor (const item of items) {\n  // Initialize item.json for output\n  item.json = item.json || {};\n  \n  // Log the entire item for debugging\n  console.log('Item:', JSON.stringify(item, null, 2));\n  \n  // Check if json fields exist\n  if (item.json) {\n    // Use directory from FileLoop node's current item\n    const directory = removePrefix($('FileLoop').item?.binary?.data?.directory || '');\n    // Use filename from FileLoop node's first output, fallback to item.json.fileName\n    const fileName = $('FileLoop').first()?.json?.fileName || item.json.fileName || '';\n    console.log('Directory after prefix removal:', directory, 'FileName:', fileName);\n    \n    // Construct weblink with correct URL and slash normalization\n    if (fileName) {\n      const path = directory ? `${directory}/${fileName}` : fileName;\n      item.json.weblink = `https://github.com/decred/dcrdex/blob/master/${path}`.replace(/\\/+/g, '/').replace(/\\/$/, '');\n    } else {\n      console.log('No fileName, setting default weblink');\n      item.json.weblink = `https://github.com/decred/dcrdex/blob/master/${directory}`.replace(/\\/+/g, '/').replace(/\\/$/, '');\n    }\n  } else {\n    console.log('Missing json:', item);\n    item.json.weblink = 'https://github.com/decred/dcrdex/blob/master/';\n  }\n}\n\nreturn items;"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-180,-420],"id":"d12247d1-f0d1-4ac3-bda0-a781a5f26103","name":"dcrDEX"},{"parameters":{"jsCode":"// Function to remove the prefix from the directory\nfunction removePrefix(directory) {\n  const prefix = \"/data/shared/dcrdocs\"; // No trailing slash\n  // Ensure directory is a string and not null/undefined\n  if (typeof directory !== 'string' || !directory) {\n    console.log('Invalid directory:', directory);\n    return '';\n  }\n  // Normalize directory and prefix (handle multiple slashes, whitespace)\n  const normalizedDirectory = directory.replace(/\\/+/g, '/').trim();\n  const normalizedPrefix = prefix.replace(/\\/+/g, '/').trim();\n  console.log('Input directory:', directory);\n  console.log('Normalized directory:', normalizedDirectory);\n  console.log('Normalized prefix:', normalizedPrefix);\n  \n  if (normalizedDirectory.startsWith(normalizedPrefix)) {\n    const result = normalizedDirectory.slice(normalizedPrefix.length).replace(/^\\/+/, '');\n    console.log('Prefix removed, result:', result);\n    return result;\n  }\n  console.log('Prefix not found, returning:', normalizedDirectory);\n  return normalizedDirectory;\n}\n\n// Function to remove file extension and handle index.md\nfunction processFileName(fileName) {\n  if (typeof fileName !== 'string' || !fileName) {\n    return '';\n  }\n  // Remove extension (e.g., .md, .mediawiki)\n  const baseName = fileName.replace(/\\.[^/.]+$/, '');\n  // Return empty string for index.md\n  return baseName.toLowerCase() === 'index' ? '' : baseName;\n}\n\n// Process input items in n8n\nconst items = $input.all() || [];\nfor (const item of items) {\n  // Initialize item.json for output\n  item.json = item.json || {};\n  \n  // Log the entire item for debugging\n  console.log('Item:', JSON.stringify(item, null, 2));\n  \n  // Check if json fields exist\n  if (item.json) {\n    // Use directory from FileLoop node's current item\n    const directory = removePrefix($('FileLoop').item?.binary?.data?.directory || '');\n    // Use filename from FileLoop node's first output\n    const fileName = processFileName($('FileLoop').first()?.json?.fileName || '');\n    console.log('Directory after prefix removal:', directory, 'FileName (processed):', fileName);\n    \n    // Construct weblink with correct URL and trailing slash\n    if (directory || fileName) {\n      // If fileName is empty (e.g., index.md), use directory only; otherwise, include fileName\n      const path = fileName ? `${directory}/${fileName}` : directory;\n      item.json.weblink = `https://docs.decred.org/${path}/`.replace(/\\/+/g, '/');\n    } else {\n      console.log('No directory or fileName, setting default weblink');\n      item.json.weblink = 'https://docs.decred.org/';\n    }\n  } else {\n    console.log('Missing json:', item);\n    item.json.weblink = 'https://docs.decred.org/';\n  }\n}\n\nreturn items;"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-180,-260],"id":"ba223745-0a2c-4132-98dc-155e1acb3a25","name":"dcrDocs"},{"parameters":{"jsCode":"// Function to remove the prefix from the directory\nfunction removePrefix(directory) {\n  const prefix = \"/data/shared/decred-journal\"; // No trailing slash\n  // Ensure directory is a string and not null/undefined\n  if (typeof directory !== 'string' || !directory) {\n    console.log('Invalid directory:', directory);\n    return '';\n  }\n  // Normalize directory and prefix (handle multiple slashes, whitespace)\n  const normalizedDirectory = directory.replace(/\\/+/g, '/').trim();\n  const normalizedPrefix = prefix.replace(/\\/+/g, '/').trim();\n  console.log('Input directory:', directory);\n  console.log('Normalized directory:', normalizedDirectory);\n  console.log('Normalized prefix:', normalizedPrefix);\n  \n  if (normalizedDirectory.startsWith(normalizedPrefix)) {\n    const result = normalizedDirectory.slice(normalizedPrefix.length).replace(/^\\/+/, '');\n    console.log('Prefix removed, result:', result);\n    return result;\n  }\n  console.log('No prefix matched, returning:', normalizedDirectory);\n  return normalizedDirectory;\n}\n\n// Log FileLoop node output for debugging\nconsole.log('FileLoop item output:', JSON.stringify($('FileLoop').item, null, 2));\nconsole.log('FileLoop first output:', JSON.stringify($('FileLoop').first(), null, 2));\n\n// Process input items in n8n\nconst items = $input.all() || [];\nfor (const item of items) {\n  // Initialize item.json for output\n  item.json = item.json || {};\n  \n  // Log the entire item for debugging\n  console.log('Item:', JSON.stringify(item, null, 2));\n  \n  // Check if json fields exist\n  if (item.json) {\n    // Use directory from FileLoop node's current item\n    const directory = removePrefix($('FileLoop').item?.binary?.data?.directory || '');\n    // Use filename from FileLoop node's first output, fallback to item.json.fileName\n    const fileName = $('FileLoop').first()?.json?.fileName || item.json.fileName || '';\n    console.log('Directory after prefix removal:', directory, 'FileName:', fileName);\n    \n    // Construct weblink with correct URL and slash normalization\n    if (fileName) {\n      const path = directory ? `${directory}/${fileName}` : fileName;\n      item.json.weblink = `https://github.com/karamble/bisonrelay-archive/blob/master/journal/${path}`.replace(/\\/+/g, '/').replace(/\\/$/, '');\n    } else {\n      console.log('No fileName, setting default weblink');\n      item.json.weblink = `https://github.com/karamble/bisonrelay-archive/blob/master/journal/${directory}`.replace(/\\/+/g, '/').replace(/\\/$/, '');\n    }\n  } else {\n    console.log('Missing json:', item);\n    item.json.weblink = 'https://github.com/karamble/bisonrelay-archive/blob/master/journal/';\n  }\n}\n\nreturn items;"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-180,-100],"id":"c6737e2a-cc4a-497f-88bb-3d528a161d54","name":"decred-journal"},{"parameters":{"operation":"text","options":{}},"type":"n8n-nodes-base.extractFromFile","typeVersion":1,"position":[900,-100],"id":"9da6926e-1aef-4525-8149-aa83ec52ea92","name":"Extract from File"},{"parameters":{"mode":"insert","tableName":{"__rl":true,"value":"documents","mode":"list","cachedResultName":"documents"},"embeddingBatchSize":20,"options":{"queryName":"match_documents"}},"type":"@n8n/n8n-nodes-langchain.vectorStoreSupabase","typeVersion":1.1,"position":[1060,-100],"id":"4d6e110c-502c-4acf-a624-269469511a3a","name":"Supabase Vector Store","retryOnFail":true,"maxTries":5,"credentials":{"supabaseApi":{"id":"hnT2d1fIS5juk6se","name":"Supabase account"}}},{"parameters":{"model":"nomic-embed-text:latest"},"type":"@n8n/n8n-nodes-langchain.embeddingsOllama","typeVersion":1,"position":[1040,100],"id":"5c23a9a9-130f-47b6-a8d9-0fba0a38ef81","name":"Embeddings Ollama","credentials":{"ollamaApi":{"id":"kFecshIU3EVpasgk","name":"Ollama account"}}},{"parameters":{"jsonMode":"expressionData","jsonData":"={{ $json.data }}\n","options":{"metadata":{"metadataValues":[{"name":"file_id","value":"={{ $('construct fields').item.json.fileID }}"},{"name":"file_name","value":"={{ $('construct fields').item.json.fileName }}"},{"name":"file_url","value":"={{ $('construct fields').item.json.weblink }}"},{"name":"file_hash","value":"={{ $('construct fields').item.json.fileHash }}"}]}}},"type":"@n8n/n8n-nodes-langchain.documentDefaultDataLoader","typeVersion":1,"position":[1160,100],"id":"e5c92faa-9ce9-4219-8681-004296d111b7","name":"Default Data Loader"},{"parameters":{"chunkSize":400,"options":{}},"type":"@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter","typeVersion":1,"position":[1160,240],"id":"1d1eb49f-2432-41f2-8947-04473451b006","name":"Recursive Character Text Splitter"},{"parameters":{"promptType":"define","text":"={{ $json.query }}","options":{"systemMessage":"You are an expert AI assistant specialized in the Decred Cryptocurrency, tasked with answering user questions accurately using a retrieval-augmented generation (RAG) approach. Your Decred knowledge base is stored in a Supabase vector database, split across two tables: `documents` (containing document content and metadata) and `document_metadata` (containing metadata like `file_id`, `file_name`, `file_url`, etc.). Your goal is to provide precise, relevant answers by systematically using all available tools in order, logging each step, and suggesting the user read the full document online using the `file_url`. If no answer is found, clearly state so without fabricating information.\n\n### The current date and time is: {{ $now }}\n\n### Available Tools\n1. **Decred Knowledge**: Performs semantic search in the Decred knowledge vector database `documents` table. Output: Relevant text chunks from the knowledge database. The text chunks contain metadata like file_id and file_url for each text chunk. The found file_id can be used to get the full text content of that specific document via the **Get text content of specific document** mentioned in Step 3.\n2. **List Decred Documents**: Retrieves metadata from the Decred knowledge base `document_metadata` (e.g., `file_id`, `file_name`, `file_url`). Output: Metadata for all available documents in the knowledge database.\n3. **Decred Knowledge Full Text Retrieval**: Retrieves full document content from the Decred knowledge base `documents` table for a specific document of your choice. Input arg: `file_id` (you can get available file_id from the previous 2 steps). Output: `document_text` and `file_url`.\n4.**Decred Block Explorer**: MCP Server to access the Decred Block Explorer. Always use the current date and time tool and consider the date of today before using the Block Explorer tool.\n5. **Think**: Logs intermediate findings. Input: Text describing the step. Output: None (logs to Think node).\n6. **HTTP Request Tool**: Fetches webpage content. Input: Stringified query (e.g., \"?url=VALIDURL&method=simplified\"). Output: Markdown content.\n7. **SearXNG**: Searches the web for additional context. Input: Search query. Output: Search results. You can open relevant search result websites with the HTTP Request Tool.\n8. **Coinmarketcap**: Retrieve Crypto Market related informations from CoinMarketCap\n9. **Private Google Assistant**: Access to the users GMAIL, Google Calendar to schedule Events, Invite people or process Emails\n10. **Content Creator**: Write Blog Posts and research information from the web\n11. **Private Nextcloud**: Access Nextcloud to handle files and backup all workflows of the current n8n instance.\n12. **Technical Analysis** : Makes TA by automatically taking a Tradingview Chart Snapshot and analyzing it\n13. **Today Date and Time** : Get the current date and time\n\n### Decred Knowledge Workflow Instructions\nFollow these steps for every query, using tools in order, identifying correct inputs, and logging each step:\n1. **Semantic Search**:\n   - Use **Supabase Vector Store1** with the user’s question to retrieve relevant text chunks.\n   - Extract the `file_id` (a unique identifier, e.g., 'ABC123') from the metadata of the most relevant chunk(s). Do NOT use `file_url` or any other field.\n   - Log: \"Step 1: Vector store results: [summary of chunks], extracted file_id: [file_id]\" using **Think**.\n2. **Identify Keywords**:\n   - Extract keywords from the question.\n   - Log: \"Step 2: Keywords identified: [keywords]\" using **Think**.\n3. **List Documents**:\n   - Use **List Documents** to retrieve metadata for relevant documents based on keywords or question context.\n   - Confirm or select the most relevant `file_id` (e.g., 'ABC123') from the metadata, prioritizing the `file_id` from **Supabase Vector Store1** if available. Do NOT select `file_url` or any other field.\n   - Log: \"Step 3: Found document with file_id: [file_id], file_name: [file_name], file_url: [file_url]\" using **Think**.\n4. **Retrieve Full Text**:\n   - Use **Get text content of specific document** with the `file_id` extracted from **Supabase Vector Store1** or **List Documents**. You MUST provide the `file_id` as the `file_id` parameter. Do NOT use `file_url` or any other value. If no valid `file_id` is available, do not call the tool and instead log: \"Step 4: No valid file_id found, skipping tool call\" using **Think**.\n   - Log: \"Step 4: Retrieved document for file_id [file_id], file_name [file_name] with file_url [file_url]\" using **Think**.\n5. **Retrieve Document URL**:\n   - Use **List Documents** to confirm `file_url` for the `file_id`.\n   - Log: \"Step 5: Retrieved file_url for file_id [file_id]: [file_url]\" using **Think**.\n6. **Optional Web Search**:\n   - If needed, use **SearXNG** for additional context or **HTTP Request Tool** to fetch content from `file_url` (prefer `method=simplified` unless links are needed).\n   - Log: \"Step 6: Web search results: [summary]\" or \"Fetched webpage content for [file_url]\" using **Think**.\n7. **Synthesize Answer**:\n   - Combine vector store results, document text, and web search (if used) to form a clear, concise answer.\n   - Include the `file_url` in the suggestion: \"Read the full document here: [file_url].\"\n   - If no answer is found, state: \"I couldn’t find an answer to your question in the available documentation.\"\n\n### Guidelines\n- When using the block explorer, remember the current date and time is: {{ $now() }}\n- You MUST extract the `file_id` (e.g., 'ABC123') from **Supabase Vector Store1** or **List Documents** and use it as the `document_id` for **Get text content of specific document**. Do NOT use `file_url` (e.g., 'https://...') or any other field as the `document_id`.\n- If the user’s query does not provide enough context to identify a `file_id`, ask the user to clarify the document (e.g., \"Please specify the document ID or name\") and log this using **Think**.\n- Log each step using the **Think** tool, including the exact `file_id` extracted and any issues with incorrect fields (e.g., `file_url`).\n- Base answers solely on retrieved documents or verified results.\n- Do not fabricate information or make empty or incorrect tool calls.\n- Maintain clarity and structure in responses.\n- Finish your answer by summarizing all details you took note in the **Think** log.\n- Output the answer in markdown format\n","maxIterations":10,"returnIntermediateSteps":true}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":1.9,"position":[180,-1540],"id":"dabb91b0-d396-4a47-8a5e-29f017214ab7","name":"AI Agent"},{"parameters":{"sessionIdType":"customKey","sessionKey":"={{ $('Prepare fields from query').item.json.bruser }}","contextWindowLength":10},"type":"@n8n/n8n-nodes-langchain.memoryPostgresChat","typeVersion":1.3,"position":[-780,-1160],"id":"81137b7a-452a-488a-934f-599ff0e2e8d3","name":"Postgres Chat Memory","credentials":{"postgres":{"id":"vgdjEsduewhjySkg","name":"Postgres account"}}},{"parameters":{"model":"nomic-embed-text:latest"},"type":"@n8n/n8n-nodes-langchain.embeddingsOllama","typeVersion":1,"position":[-140,-1020],"id":"2d278a33-ef71-4363-8df9-c876d0bfed32","name":"Embeddings Ollama1","credentials":{"ollamaApi":{"id":"kFecshIU3EVpasgk","name":"Ollama account"}}},{"parameters":{"name":"HTTP_Request_Tool","description":"Call this tool to fetch a webpage content. The input should be a stringified HTTP query parameter like this: \"?url=VALIDURL&method=SELECTEDMETHOD\". \"url\" parameter should contain the valid URL string. \"method\" key can be either \"full\" or \"simplified\". method=full will fetch the whole webpage content in the Markdown format, including page links and image links. method=simplified will return the Markdown content of the page but remove urls and image links from the page content for simplicity. Before calling this tool, think strategically which \"method\" to call. Best of all to use method=simplified. However, if you anticipate that the page request is not final or if you need to extract links from the page, pick method=full. You can use the file_url you found in the documnets_metadata table that the List Documents tool gave you.","workflowId":{"__rl":true,"value":"nGeWPrRBjMuXyV5g","mode":"list","cachedResultName":"web-request"},"workflowInputs":{"mappingMode":"defineBelow","value":{},"matchingColumns":[],"schema":[],"attemptToConvertTypes":false,"convertFieldsToString":false}},"id":"51229706-955f-4bf3-b96c-e2fbd8eb790d","name":"HTTP_Request_Tool","type":"@n8n/n8n-nodes-langchain.toolWorkflow","position":[-920,-1020],"typeVersion":2},{"parameters":{"options":{"language":"en"}},"type":"@n8n/n8n-nodes-langchain.toolSearXng","typeVersion":1,"position":[-780,-1020],"id":"5bdd1edc-ed7e-4f11-87cd-e193f1510e64","name":"SearXNG","credentials":{"searXngApi":{"id":"O6uyL0jxnVexUC5G","name":"SearXNG account"}}},{"parameters":{},"type":"@n8n/n8n-nodes-langchain.toolThink","typeVersion":1,"position":[-660,-1160],"id":"d6c38c7b-aef8-439f-9218-ef0e74b74f0a","name":"Think"},{"parameters":{"descriptionType":"manual","toolDescription":"Call this tool to fetch the full content of a specified document by you. Input args: file_id\n\n\"file_id\" parameter should contain the valid file_id of the relevant document you found from the previous List Documents tool. You can use the file_url you found in the documnets_metadata table that the List Documents tool gave you.","operation":"executeQuery","query":"SELECT \n     COALESCE(string_agg(documents.content, ' ' ORDER BY COALESCE(NULLIF((documents.metadata->'loc'->'lines'->>'from'), ''), '0')::int), '') AS document_text,\n     (SELECT DISTINCT file_url FROM document_metadata WHERE file_id = '{{ $fromAI('file_id', { description: 'The ID or name of the document to retrieve' }) }}' LIMIT 1) AS file_url\n   FROM documents\n   WHERE documents.metadata->>'file_id' = '{{ $fromAI('file_id', { description: 'The ID or name of the document to retrieve' }) }}'\n   GROUP BY documents.metadata->>'file_id';","options":{}},"type":"n8n-nodes-base.postgresTool","typeVersion":2.6,"position":[-300,-1160],"id":"b4b7c3d8-43f2-41d3-919e-80be92ef54da","name":"Get text content of specific document","credentials":{"postgres":{"id":"vgdjEsduewhjySkg","name":"Postgres account"}}},{"parameters":{"operation":"select","schema":{"__rl":true,"mode":"list","value":"public"},"table":{"__rl":true,"value":"document_metadata","mode":"list","cachedResultName":"document_metadata"},"returnAll":true,"options":{}},"type":"n8n-nodes-base.postgresTool","typeVersion":2.6,"position":[-440,-1160],"id":"e5847cf6-1583-4120-80b1-faa9e8b89237","name":"List Documents1","credentials":{"postgres":{"id":"vgdjEsduewhjySkg","name":"Postgres account"}}},{"parameters":{"mode":"retrieve-as-tool","toolName":"DecredKnowledgeBase","toolDescription":"Decred Knowledge Base Vector Store","tableName":{"__rl":true,"value":"documents","mode":"list","cachedResultName":"documents"},"topK":25,"options":{"queryName":"match_documents"}},"type":"@n8n/n8n-nodes-langchain.vectorStoreSupabase","typeVersion":1.1,"position":[-160,-1160],"id":"a8caf27e-4b46-461e-9265-b732085b26c3","name":"Knowledge","credentials":{"supabaseApi":{"id":"hnT2d1fIS5juk6se","name":"Supabase account"}}},{"parameters":{"content":"## Data ingestion and vector database embedding\n\nOnly trigger this workflow if you want to add documents to the Decred Knowledge Vector Database\n\nRequired database-tables:\n* document-metadata\n* documents\n\n\nPlace **.mediawiki** or **.md** files in your local_ai_package/shared/ folder. Then trigger the workflow.\nSuggested embedding model: **nomic-embed-text**\n\nCurrently supported sub-folders are:\n* dcrdocs/\n* dcrdevdocs/\n* dcps/\n* dcrdex/docs/\n* decred-journal/\n\nUsing this directory structure will generate matching URLS in the document metadata with links to the document online.\n\n**Duplicate check**\n\nWe use a document hash for each document to ensure only updated documents will get embedded","height":1020,"width":2980},"type":"n8n-nodes-base.stickyNote","position":[-1560,-840],"typeVersion":1,"id":"bc3be0e1-1fe9-4d87-825b-eab7cf6667e1","name":"Sticky Note"},{"parameters":{"fileSelector":"/data/shared/**/*.md","options":{}},"type":"n8n-nodes-base.readWriteFile","typeVersion":1,"position":[-1080,-100],"id":"01d23320-0624-4b21-8cab-7b0aa5fba1a9","name":"fetch all markdown"},{"parameters":{"fileSelector":"/data/shared/**/*.mediawiki","options":{}},"type":"n8n-nodes-base.readWriteFile","typeVersion":1,"position":[-1080,-260],"id":"743e75ce-2a36-4ec9-80c3-760f8fa6832b","name":"fetch all mediawiki"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"cf3e2881-c4f0-4b56-ae15-4cf66c31d1c1","leftValue":"={{ $('FileLoop').item.binary.data.directory }}","rightValue":"/data/shared/decred-journal","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[-380,-100],"id":"7ffb8a24-0954-40ad-a48c-0ed8e364c7d2","name":"If decred journal","executeOnce":true},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"a581b5fa-dac2-472f-9f8d-e534b799c167","leftValue":"={{ $('FileLoop').item.binary.data.directory }}","rightValue":"/data/shared/dcrdocs","operator":{"type":"string","operation":"contains"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[-380,-260],"id":"c8a2f2fa-3d70-4315-b22f-c8e5338e3efe","name":"If dcrdocs","executeOnce":true},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"10bb1615-de04-4b6d-81f9-97ceb50c45e8","leftValue":"={{ $('FileLoop').item.binary.data.directory }}","rightValue":"/data/shared/dcrdex","operator":{"type":"string","operation":"contains"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[-380,-420],"id":"f1171a8f-9541-4526-9ff0-7b24115e2952","name":"If dcrdex","executeOnce":true},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"71ecb267-a78f-45c4-968d-e17aadffa93c","leftValue":"={{ $('FileLoop').item.binary.data.directory }}","rightValue":"/data/shared/dcrdevdocs","operator":{"type":"string","operation":"contains"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[-380,-580],"id":"b81d7934-6d88-42eb-bdf7-1a2d429a1580","name":"If dcrdevdocs","executeOnce":true},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"0ffa91d9-245a-46e0-96fb-ee5e242d836e","leftValue":"={{ $('FileLoop').item.binary.data.directory }}","rightValue":"/data/shared/dcps","operator":{"type":"string","operation":"contains"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[-380,-740],"id":"8163a677-c142-40a5-ba36-784ce23e931b","name":"If dcps","executeOnce":true},{"parameters":{"content":"## Build URLs\n**weblinks for the user of full text documents online**","height":880,"width":380,"color":3},"type":"n8n-nodes-base.stickyNote","position":[-420,-820],"typeVersion":1,"id":"93cc1ac1-d157-4bc5-b553-2894bb8926b6","name":"Sticky Note2"},{"parameters":{"assignments":{"assignments":[{"id":"514f5239-781e-42b5-862b-4035136edafd","name":"mimeType","value":"={{ $('FileLoop').item.json.mimeType }}","type":"string"},{"id":"7dff73cb-300d-4836-8b4c-1eafd2ae48bc","name":"fileType","value":"={{ $('FileLoop').item.json.fileType }}","type":"string"},{"id":"3c202e44-aadb-48d6-b9dd-549b897f80ee","name":"fileName","value":"={{ $('FileLoop').item.json.fileName }}","type":"string"},{"id":"b9a84382-5f86-4da9-a927-a49a92008690","name":"directory","value":"={{ $('FileLoop').item.binary.data.directory }}","type":"string"},{"id":"364bc073-8463-4534-8034-805fc95d9842","name":"fileSize","value":"={{ $('Hash File').item.json.fileSize }}","type":"string"},{"id":"cdda65ba-5aec-4850-a85c-fe2c42a41831","name":"fileID","value":"={{ $json.fileshort }}","type":"string"},{"id":"df372f95-dd3c-40b8-8922-f2a337027246","name":"weblink","value":"={{ $json.weblink }}","type":"string"},{"id":"5670b7c6-fea8-48ad-8834-d7698c7567d6","name":"fileHash","value":"={{ $('Hash File').item.json.hash }}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[200,-100],"id":"f47a232f-6ca7-45b7-b33b-727d078fec01","name":"construct fields"},{"parameters":{"jsCode":"function removeExtension(filename) {\n    var lastDotPosition = $('FileLoop').first().json.fileName.lastIndexOf(\".\");\n    if (lastDotPosition === -1) return filename;\n    else return $('FileLoop').first().json.fileName.substr(0, lastDotPosition);\n}\n\n// Function to remove the prefix from the directory\nvar re = /(?:\\.([^.]+))?$/;\n// Loop over input items and update the 'directory' field in the JSON of each one\nfor (const item of $input.all()) {\n  item.json.fileshort = removeExtension(item.json.fileName)              \n}\n\nreturn $input.all();"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[60,-100],"id":"595f5d5d-37fe-4e6b-8ad0-af368c51e2c8","name":"documentIDs"},{"parameters":{"schema":{"__rl":true,"mode":"list","value":"public"},"table":{"__rl":true,"value":"document_metadata","mode":"list","cachedResultName":"document_metadata"},"columns":{"mappingMode":"defineBelow","value":{"file_id":"={{ $('construct fields').item.json.fileID }}","file_name":"={{ $('construct fields').item.json.fileName }}","file_type":"={{ $('construct fields').item.json.fileType }}","file_url":"={{ $('construct fields').item.json.weblink }}","file_mimetype":"={{ $('construct fields').item.json.mimeType }}","file_size":"={{ $('construct fields').item.json.fileSize }}","file_directory":"={{ $('construct fields').item.json.directory }}","file_hash":"={{ $('Hash File').item.json.hash }}"},"matchingColumns":["id"],"schema":[{"id":"id","displayName":"id","required":false,"defaultMatch":true,"display":true,"type":"string","canBeUsedToMatch":true,"removed":true},{"id":"file_id","displayName":"file_id","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"file_name","displayName":"file_name","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"file_type","displayName":"file_type","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"file_url","displayName":"file_url","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"created_at","displayName":"created_at","required":false,"defaultMatch":false,"display":true,"type":"dateTime","canBeUsedToMatch":true,"removed":true},{"id":"file_directory","displayName":"file_directory","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"file_mimetype","displayName":"file_mimetype","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"file_extension","displayName":"file_extension","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":true},{"id":"file_size","displayName":"file_size","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"file_hash","displayName":"file_hash","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false}],"attemptToConvertTypes":false,"convertFieldsToString":false},"options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[360,-100],"id":"b8b1a4d9-a49e-49ec-ae92-407f36c5882c","name":"insert metadata","credentials":{"postgres":{"id":"vgdjEsduewhjySkg","name":"Postgres account"}}},{"parameters":{"rules":{"values":[{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"leftValue":"={{ $json.mimeType }}","rightValue":"text/plain","operator":{"type":"string","operation":"equals"},"id":"a9c25d87-3469-4d46-b60d-ba476321b8d6"}],"combinator":"and"},"renameOutput":true,"outputKey":"text"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"683cc203-fb2b-4833-9641-714bcd71e9ed","leftValue":"={{ $json.mimeType }}","rightValue":"text/markdown","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"text"}]},"options":{}},"type":"n8n-nodes-base.switch","typeVersion":3.2,"position":[720,-100],"id":"a8d17688-2551-4982-86f8-6d476763ac0e","name":"mime switch"},{"parameters":{"fileSelector":"={{ $json.file_directory }}/{{ $json.file_name }}","options":{}},"type":"n8n-nodes-base.readWriteFile","typeVersion":1,"position":[540,-100],"id":"131b4a95-518c-4159-b586-9bd976980981","name":"open full document"},{"parameters":{"model":"qwen3:32b","options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatOllama","typeVersion":1,"position":[-1060,-1120],"id":"2953b583-6e4f-4591-aa2a-9b8a45f83a21","name":"Local Ollama Chat Model","credentials":{"ollamaApi":{"id":"kFecshIU3EVpasgk","name":"Ollama account"}}},{"parameters":{"model":{"__rl":true,"mode":"list","value":"gpt-4o-mini"},"options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenAi","typeVersion":1.2,"position":[-920,-1160],"id":"86badd61-a4aa-4312-af0a-21b31b777c75","name":"Remote OpenAI Chat Model","credentials":{"openAiApi":{"id":"gVWPQBTPJWEjy9Km","name":"OpenAi account 2"}}},{"parameters":{"content":"## Decred Knowledge","height":360,"width":620,"color":5},"type":"n8n-nodes-base.stickyNote","position":[-480,-1240],"typeVersion":1,"id":"dc117b5b-d420-436a-b80e-d15356c12f01","name":"Sticky Note3"},{"parameters":{"name":"emailAgent","description":"Call this tool for any email actions.","workflowId":{"__rl":true,"value":"yrrIs6B4SILwF1xe","mode":"list","cachedResultName":"Email Agent"},"workflowInputs":{"mappingMode":"defineBelow","value":{},"matchingColumns":[],"schema":[],"attemptToConvertTypes":false,"convertFieldsToString":false}},"type":"@n8n/n8n-nodes-langchain.toolWorkflow","typeVersion":2,"position":[480,-1160],"id":"daa117a9-8792-4458-b949-d27d303ac4ef","name":"Email Agent"},{"parameters":{"name":"calendarAgent","description":"Call this tool for any calendar action.","workflowId":{"__rl":true,"value":"qRNnienRApKIiDBL","mode":"list","cachedResultName":"Calendar Agent"},"workflowInputs":{"mappingMode":"defineBelow","value":{},"matchingColumns":[],"schema":[],"attemptToConvertTypes":false,"convertFieldsToString":false}},"type":"@n8n/n8n-nodes-langchain.toolWorkflow","typeVersion":2,"position":[620,-1160],"id":"e71c9899-33a8-4c3e-bbd1-374e2afce761","name":"Calendar Agent"},{"parameters":{"name":"contentCreator","description":"Call this tool to create blog posts.","workflowId":{"__rl":true,"value":"TIFMGsSHA3bg6WFL","mode":"list","cachedResultName":"Content Creator Agent"},"workflowInputs":{"mappingMode":"defineBelow","value":{},"matchingColumns":[],"schema":[],"attemptToConvertTypes":false,"convertFieldsToString":false}},"type":"@n8n/n8n-nodes-langchain.toolWorkflow","typeVersion":2,"position":[480,-1020],"id":"ad68d510-3b72-42a1-a07f-f8932443a96d","name":"Content Creator Agent"},{"parameters":{},"type":"@n8n/n8n-nodes-langchain.toolCalculator","typeVersion":1,"position":[-660,-1020],"id":"c8616afb-57e9-404a-8526-12c490b5e6c1","name":"Calculator"},{"parameters":{"content":"## AI Agent Basic Tools","height":360,"width":600,"color":5},"type":"n8n-nodes-base.stickyNote","position":[-1100,-1240],"typeVersion":1,"id":"ee258502-c21f-4f85-954b-30ee485d6151","name":"Sticky Note4"},{"parameters":{"content":"## Private Google Assistant","height":360,"width":320,"color":7},"type":"n8n-nodes-base.stickyNote","position":[440,-1240],"typeVersion":1,"id":"53b5a461-e55c-4bfe-87a2-ab538059e6bc","name":"Sticky Note5"},{"parameters":{"description":"Call this tool for any nextcloud action.","workflowId":{"__rl":true,"value":"9MWf8abdPkcXHHvL","mode":"list","cachedResultName":"Nextcloud Agent"},"workflowInputs":{"mappingMode":"defineBelow","value":{},"matchingColumns":[],"schema":[],"attemptToConvertTypes":false,"convertFieldsToString":false}},"type":"@n8n/n8n-nodes-langchain.toolWorkflow","typeVersion":2.2,"position":[820,-1140],"id":"ed16bb7c-95a3-418b-a091-ac0da5f3a51d","name":"Nextcloud Tool"},{"parameters":{"content":"## Private Nextcloud","height":380,"width":160,"color":7},"type":"n8n-nodes-base.stickyNote","position":[780,-1240],"typeVersion":1,"id":"341ef515-8175-4954-8873-2f55a8b19cc4","name":"Sticky Note1"},{"parameters":{"description":"Call this tool to make a backup of the worklows to nextcloud.","workflowId":{"__rl":true,"value":"3ADmNCQ57SJZOgt7","mode":"list","cachedResultName":"Nextcloud Workflow Backup"},"workflowInputs":{"mappingMode":"defineBelow","value":{},"matchingColumns":[],"schema":[],"attemptToConvertTypes":false,"convertFieldsToString":false}},"type":"@n8n/n8n-nodes-langchain.toolWorkflow","typeVersion":2.2,"position":[820,-1000],"id":"4e0876d8-834c-428a-b952-2605e8742679","name":"Nextcloud Workflow Backup"},{"parameters":{"description":"Call this tool for CoinMarketCap AI Data analysis, a powerful, multi-source crypto intelligence system that integrates three specialized agents.","workflowId":{"__rl":true,"value":"aLLm0WhqkWKECXTm","mode":"list","cachedResultName":"CoinMarketCap AI Analyst Agent"},"workflowInputs":{"mappingMode":"defineBelow","value":{},"matchingColumns":[],"schema":[],"attemptToConvertTypes":false,"convertFieldsToString":false}},"type":"@n8n/n8n-nodes-langchain.toolWorkflow","typeVersion":2.2,"position":[220,-1180],"id":"a0bfa6c7-5d06-464f-8d82-5db075727636","name":"CoinMarketCap Crypto Analyst"},{"parameters":{"content":"## CoinMarketCap","height":360,"width":220,"color":5},"type":"n8n-nodes-base.stickyNote","position":[160,-1240],"typeVersion":1,"id":"1753794e-0906-4f00-b984-a8b914907acd","name":"Sticky Note6"},{"parameters":{"httpMethod":"POST","path":"ef0d92e2-34be-4abf-9578-7910c457631b","authentication":"headerAuth","responseMode":"responseNode","options":{}},"type":"n8n-nodes-base.webhook","typeVersion":2,"position":[-960,-1560],"id":"5edee934-840a-4292-a035-0e1edaec1753","name":"Webhook","webhookId":"ef0d92e2-34be-4abf-9578-7910c457631b","credentials":{"httpHeaderAuth":{"id":"J85RKRPOfQhDZsG8","name":"BRaiBot Webhook"}}},{"parameters":{"respondWith":"allIncomingItems","options":{}},"type":"n8n-nodes-base.respondToWebhook","typeVersion":1.2,"position":[680,-1540],"id":"3a29d8db-8bff-4229-b166-970ea82b279b","name":"Respond to Webhook"},{"parameters":{},"type":"n8n-nodes-base.merge","typeVersion":3.1,"position":[500,-1680],"id":"1ec2d860-9b86-4f98-a71e-504b13ae5785","name":"Merge"},{"parameters":{"sseEndpoint":"https://n8n.nomaddreams.cc/mcp/b30e18e9-3a97-41ed-8516-8f47faa5c914/sse","authentication":"headerAuth"},"type":"@n8n/n8n-nodes-langchain.mcpClientTool","typeVersion":1,"position":[-440,-1000],"id":"f71b13c8-ea62-4d42-9428-2e413e72f909","name":"MCP Client","credentials":{"httpHeaderAuth":{"id":"J85RKRPOfQhDZsG8","name":"BRaiBot Webhook"}}},{"parameters":{"description":"Call this tool to do TA / Technical Analysis of a Chart. The query is always EXCHANGE:TICKERPAIR example: BINANCE:DCRUSDT or NASDAQ:AAPLUSD\n\nResponse:\nimageurl and content. You can return md and include the image first and then the text content.","workflowId":{"__rl":true,"value":"uBvv9bA2A3UqTCJd","mode":"list","cachedResultName":"Technical Analysis Agent"},"workflowInputs":{"mappingMode":"defineBelow","value":{},"matchingColumns":[],"schema":[],"attemptToConvertTypes":false,"convertFieldsToString":false}},"type":"@n8n/n8n-nodes-langchain.toolWorkflow","typeVersion":2.2,"position":[220,-1020],"id":"ab1fcb27-62d0-4ba4-ab51-e91d6fabb1c0","name":"Technical Analysis Chart Tool"},{"parameters":{"rules":{"values":[{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"leftValue":"={{ $json }}","rightValue":"","operator":{"type":"object","operation":"empty","singleValue":true},"id":"a7c300a8-8350-4fce-9a26-c1a7f8748656"}],"combinator":"and"},"renameOutput":true,"outputKey":"No record"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"3373bbcf-d60c-4402-9ade-366b37b9374d","leftValue":"={{ $json.file_hash }}","rightValue":"={{ $('Hash File').item.json.hash }}","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"Record & Hash match"},{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"23565165-9a04-4d26-aeda-43a3e1fd9f0e","leftValue":"={{ $json.file_hash }}","rightValue":"={{ $('Hash File').item.json.hash }}","operator":{"type":"string","operation":"notEquals"}}],"combinator":"and"},"renameOutput":true,"outputKey":"Hash mismatch"}]},"options":{}},"type":"n8n-nodes-base.switch","typeVersion":3.2,"position":[-640,-380],"id":"6c3bf5b6-7cae-47bc-a0e2-6b9e25014be4","name":"Switch"},{"parameters":{"type":"SHA256","binaryData":true,"dataPropertyName":"hash"},"type":"n8n-nodes-base.crypto","typeVersion":1,"position":[-640,-80],"id":"d412af91-1b6a-46ff-9c81-4a087349c434","name":"Hash File"},{"parameters":{"operation":"getAll","tableId":"document_metadata","returnAll":true,"matchType":"allFilters","filters":{"conditions":[{"keyName":"file_name","condition":"eq","keyValue":"={{ $json.fileName }}"},{"keyName":"file_directory","condition":"eq","keyValue":"={{ $('FileLoop').item.binary.data.directory }}"}]}},"type":"n8n-nodes-base.supabase","typeVersion":1,"position":[-640,-240],"id":"289797e2-66a7-47cb-a65f-09829b62ceb5","name":"DB check existing hashes","alwaysOutputData":true,"credentials":{"supabaseApi":{"id":"hnT2d1fIS5juk6se","name":"Supabase account"}}},{"parameters":{"operation":"delete","tableId":"document_metadata","filters":{"conditions":[{"keyName":"file_hash","condition":"eq","keyValue":"={{ $('DB check existing hashes').item.json.file_hash }}"}]}},"type":"n8n-nodes-base.supabase","typeVersion":1,"position":[-640,-580],"id":"ba48a2af-cbf4-4bdb-a7e5-8bd6adcb6493","name":"delete document_metadata","executeOnce":true,"credentials":{"supabaseApi":{"id":"hnT2d1fIS5juk6se","name":"Supabase account"}}},{"parameters":{"operation":"delete","tableId":"documents","filterType":"string","filterString":"=metadata->>file_hash=like.*{{ $('DB check existing hashes').item.json.file_hash }}*"},"type":"n8n-nodes-base.supabase","typeVersion":1,"position":[-640,-740],"id":"9f7054c6-efb9-4abc-96fa-5c7d32d0d255","name":"delete document vector","executeOnce":true,"credentials":{"supabaseApi":{"id":"hnT2d1fIS5juk6se","name":"Supabase account"}}},{"parameters":{"options":{}},"type":"n8n-nodes-base.splitInBatches","typeVersion":3,"position":[-880,-100],"id":"841e0a16-13c5-4974-99f8-ccfa696e5b73","name":"FileLoop"},{"parameters":{"description":"Call this tool to get the current date and time","jsCode":"// Use of Date.now() method\nlet d = Date(Date.now());\n\n// Converting the number of millisecond in date string\na = d.toString()\nreturn a;"},"type":"@n8n/n8n-nodes-langchain.toolCode","typeVersion":1.2,"position":[-300,-1000],"id":"d431de12-595e-468f-a9fc-d41076545237","name":"today date and time"},{"parameters":{"content":"## Duplicate and Update Check\n","height":960,"color":3},"type":"n8n-nodes-base.stickyNote","position":[-700,-820],"typeVersion":1,"id":"f6bc6a94-bf23-4e22-b934-17da03f34c54","name":"Sticky Note7"},{"parameters":{"operation":"executeQuery","query":"CREATE TABLE public.documents (\n    id uuid DEFAULT gen_random_uuid() NOT NULL,\n    created_at timestamp with time zone DEFAULT now() NOT NULL,\n    content text,\n    embedding public.vector,\n    metadata jsonb,\n    file_id character varying,\n    file_name character varying\n);\n","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.5,"position":[360,-700],"id":"4200c3e9-e4bf-4e92-8069-14922c69d71a","name":"Create Documents Table","credentials":{"postgres":{"id":"vgdjEsduewhjySkg","name":"Postgres account"}}},{"parameters":{"operation":"executeQuery","query":"CREATE TABLE public.n8n_chat_histories (\n    id integer NOT NULL,\n    session_id character varying(500) NOT NULL,\n    message jsonb NOT NULL\n);","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.5,"position":[920,-700],"id":"10d8232e-37ff-4abe-a25a-f2846a044b72","name":"Create Chat History Table","credentials":{"postgres":{"id":"vgdjEsduewhjySkg","name":"Postgres account"}}},{"parameters":{"content":"## Create Database Tables\n**Execute every node only once**","height":300,"width":1120,"color":7},"type":"n8n-nodes-base.stickyNote","position":[280,-820],"typeVersion":1,"id":"e66a5ec1-8a01-4917-86f1-6a6b97883c0a","name":"Sticky Note8"},{"parameters":{"operation":"executeQuery","query":"CREATE TABLE public.document_metadata (\n    id uuid DEFAULT gen_random_uuid() NOT NULL,\n    file_id character varying,\n    file_name character varying,\n    file_type character varying,\n    file_url character varying,\n    created_at timestamp with time zone DEFAULT now() NOT NULL,\n    file_directory character varying,\n    file_mimetype character varying,\n    file_size character varying,\n    file_hash character varying\n);\n","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.5,"position":[640,-700],"id":"bc16e772-ee80-4590-b4de-940f8bc30b51","name":"Create Documents Metadata Table","credentials":{"postgres":{"id":"vgdjEsduewhjySkg","name":"Postgres account"}}},{"parameters":{"content":"# Decred AI Agent\nfor BRaiBot\n\nAuthor: [karamble](https://github.com/karamble/)\n\n## What is this?\nAI Agent for [BRaibot](https://github.com/karamble/braibot) that connects via webhook to the Bot operated on [Decred](https://decred.org)`s [BisonRelay](https://github.com/companyzero/bisonrelay/) Network.\n\n\n## What makes this template powerful?\n* Can run local-ai with a local ollama installation\n* Can run AI from cloud by any provider\n* Easily expandable with tools for the AI Agent\n* Vector Knowledge Database perfect for Decred Knowledge from Docs\n\n## Getting Started\n1. Run the table creation nodes first to set up your database tables in Supabase\n2. Upload your documents to the folder on your computer that is mounted to /data/shared in the n8n container. This folder by default is the \"shared\" folder in the local AI package.\n3. The agent will process them automatically (chunking text, storing tabular data in Supabase)\n4. Start asking questions that leverage the agent's multiple reasoning approaches","height":940,"width":420,"color":6},"type":"n8n-nodes-base.stickyNote","position":[-1560,-1820],"typeVersion":1,"id":"58994dc1-a406-477e-aa59-dc39902cdec1","name":"Sticky Note9"},{"parameters":{"assignments":{"assignments":[{"id":"6b613d80-2aab-450e-8ea1-0e8dd140939f","name":"query","value":"={{ $json.chatInput }}{{ $json.body.message }}{{ $json.query }}","type":"string"},{"id":"12e044d8-3a29-4f49-9f17-7711fe305ce2","name":"session_id","value":"={{ $('Webhook').item.json.body.user }}","type":"string"},{"id":"a1719a00-094b-4a04-b9f0-29da83a2c9ca","name":"bruser","value":"={{ $('Webhook').item.json.body.user }}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[-60,-1540],"id":"483be69a-8660-4b30-9139-d0c7369da656","name":"Prepare fields from query"},{"parameters":{"content":"## How to export the knowledge database?\n\nOpen a shell in your docker container on the supabase-db volume with:\ndocker exec -it supabase-db sh\n\nThen use this command to export the database tables with schema and contents:\npg_dump -U postgres -d postgres --table=public.documents --table=public.document_metadata --table=public.n8n_chat_histories > schema_with_data.sql","height":200,"width":1120,"color":7},"type":"n8n-nodes-base.stickyNote","position":[280,-500],"typeVersion":1,"id":"9e74cf0e-1c50-45d9-ab15-2829685839da","name":"Sticky Note10"},{"parameters":{"operation":"executeQuery","query":"CREATE OR REPLACE FUNCTION public.match_documents(query_embedding vector, match_count integer DEFAULT 5, filter jsonb DEFAULT '{}'::jsonb)\n RETURNS TABLE(id uuid, content text, metadata jsonb, similarity double precision)\n LANGUAGE plpgsql\nAS $function$\nBEGIN\nRETURN QUERY\nSELECT\ndocuments.id,\ndocuments.content,\ndocuments.metadata,\n(1 - (documents.embedding <=> query_embedding))::float AS similarity\nFROM documents\nWHERE documents.metadata @> filter\nORDER BY similarity DESC\nLIMIT match_count;\nEND;\n$function$","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.5,"position":[1180,-700],"id":"90893590-bb16-4f6d-b739-59b18d37dca4","name":"Create match_documents function","credentials":{"postgres":{"id":"vgdjEsduewhjySkg","name":"Postgres account"}}},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"02be1ee5-43bf-4700-9d12-f727d53cc4f5","leftValue":"={{  $json.body.message }}","rightValue":"alt=Audio note,type=audio/ogg","operator":{"type":"string","operation":"contains"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[-800,-1560],"id":"808e5fb6-2b02-43ce-8bc0-6903b3485963","name":"If audionote"},{"parameters":{"operation":"toBinary","sourceProperty":"base64","options":{"mimeType":"audio/ogg"}},"type":"n8n-nodes-base.convertToFile","typeVersion":1.1,"position":[-520,-1740],"id":"382e82c9-5835-4a30-8773-fb53daa798a2","name":"Convert to File"},{"parameters":{"resource":"audio","operation":"transcribe","options":{}},"type":"@n8n/n8n-nodes-langchain.openAi","typeVersion":1.8,"position":[-360,-1740],"id":"f975fc01-eac7-4b97-a5e7-442b60d9e0e7","name":"OpenAI","credentials":{"openAiApi":{"id":"gVWPQBTPJWEjy9Km","name":"OpenAi account 2"}}},{"parameters":{"jsCode":"// Access the query string from $json.query\nconst input = $json.body.message;\n\n// Initialize output JSON\nconst output = {};\n\n// Check if input exists and is a string\nif (!input || typeof input !== 'string') {\n  output.error = 'Invalid or missing $json.query';\n  output.debug = { input: input };\n  return [{ json: output }];\n}\n\n// Use regex to extract the base64 data (from data= to before ]--)\nconst match = input.match(/data=([\\w+/]+={0,2})\\]--/);\n\n// Check if match was found\nif (!match) {\n  output.error = 'No base64 data found in the input string';\n  output.debug = { input: input };\n  return [{ json: output }];\n}\n\n// Extract and return base64 data\noutput.base64 = match[1];\nreturn [{ json: output }];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-660,-1740],"id":"2dd29145-4b50-4c4e-8137-e50295af921b","name":"Code"},{"parameters":{"assignments":{"assignments":[{"id":"8c071d66-6943-454a-ae0e-abb49a966a6d","name":"query","value":"={{ $json.text }}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[-200,-1740],"id":"0ecc025b-2f00-46af-b277-e09a2d573ca7","name":"transcribed"},{"parameters":{"content":"## Audio Note Transcription\nWe transcribe a voice message to text","height":240,"width":640},"type":"n8n-nodes-base.stickyNote","position":[-700,-1820],"typeVersion":1,"id":"b59bdb04-9331-471d-8249-7d88937a9b78","name":"Sticky Note11"}],"connections":{"When clicking ‘Test workflow’":{"main":[[{"node":"fetch all markdown","type":"main","index":0}]]},"DCP":{"main":[[{"node":"documentIDs","type":"main","index":0}]]},"devDocs":{"main":[[{"node":"documentIDs","type":"main","index":0}]]},"dcrDEX":{"main":[[{"node":"documentIDs","type":"main","index":0}]]},"dcrDocs":{"main":[[{"node":"documentIDs","type":"main","index":0}]]},"decred-journal":{"main":[[{"node":"documentIDs","type":"main","index":0}]]},"Extract from File":{"main":[[{"node":"Supabase Vector Store","type":"main","index":0}]]},"Embeddings Ollama":{"ai_embedding":[[{"node":"Supabase Vector Store","type":"ai_embedding","index":0}]]},"Default Data Loader":{"ai_document":[[{"node":"Supabase Vector Store","type":"ai_document","index":0}]]},"Recursive Character Text Splitter":{"ai_textSplitter":[[{"node":"Default Data Loader","type":"ai_textSplitter","index":0}]]},"Supabase Vector Store":{"main":[[{"node":"FileLoop","type":"main","index":0}]]},"Postgres Chat Memory":{"ai_memory":[[{"node":"AI Agent","type":"ai_memory","index":0}]]},"Embeddings Ollama1":{"ai_embedding":[[{"node":"Knowledge","type":"ai_embedding","index":0}]]},"HTTP_Request_Tool":{"ai_tool":[[{"node":"AI Agent","type":"ai_tool","index":0}]]},"SearXNG":{"ai_tool":[[{"node":"AI Agent","type":"ai_tool","index":0}]]},"Think":{"ai_tool":[[{"node":"AI Agent","type":"ai_tool","index":0}]]},"Get text content of specific document":{"ai_tool":[[{"node":"AI Agent","type":"ai_tool","index":0}]]},"List Documents1":{"ai_tool":[[{"node":"AI Agent","type":"ai_tool","index":0}]]},"Knowledge":{"ai_tool":[[{"node":"AI Agent","type":"ai_tool","index":0}]],"ai_vectorStore":[[]]},"fetch all markdown":{"main":[[{"node":"FileLoop","type":"main","index":0}]]},"fetch all mediawiki":{"main":[[{"node":"FileLoop","type":"main","index":0}]]},"If decred journal":{"main":[[{"node":"decred-journal","type":"main","index":0}]]},"If dcrdocs":{"main":[[{"node":"dcrDocs","type":"main","index":0}],[{"node":"If decred journal","type":"main","index":0}]]},"If dcrdex":{"main":[[{"node":"dcrDEX","type":"main","index":0}],[{"node":"If dcrdocs","type":"main","index":0}]]},"If dcrdevdocs":{"main":[[{"node":"devDocs","type":"main","index":0}],[{"node":"If dcrdex","type":"main","index":0}]]},"If dcps":{"main":[[{"node":"DCP","type":"main","index":0}],[{"node":"If dcrdevdocs","type":"main","index":0}]]},"construct fields":{"main":[[{"node":"insert metadata","type":"main","index":0}]]},"documentIDs":{"main":[[{"node":"construct fields","type":"main","index":0}]]},"insert metadata":{"main":[[{"node":"open full document","type":"main","index":0}]]},"mime switch":{"main":[[{"node":"Extract from File","type":"main","index":0}],[{"node":"Extract from File","type":"main","index":0}]]},"open full document":{"main":[[{"node":"mime switch","type":"main","index":0}]]},"Local Ollama Chat Model":{"ai_languageModel":[[]]},"Remote OpenAI Chat Model":{"ai_languageModel":[[{"node":"AI Agent","type":"ai_languageModel","index":0}]]},"Email Agent":{"ai_tool":[[]]},"Calendar Agent":{"ai_tool":[[]]},"Content Creator Agent":{"ai_tool":[[{"node":"AI Agent","type":"ai_tool","index":0}]]},"Calculator":{"ai_tool":[[{"node":"AI Agent","type":"ai_tool","index":0}]]},"Nextcloud Tool":{"ai_tool":[[]]},"Nextcloud Workflow Backup":{"ai_tool":[[{"node":"AI Agent","type":"ai_tool","index":0}]]},"CoinMarketCap Crypto Analyst":{"ai_tool":[[{"node":"AI Agent","type":"ai_tool","index":0}]]},"Webhook":{"main":[[{"node":"If audionote","type":"main","index":0}]]},"AI Agent":{"main":[[{"node":"Merge","type":"main","index":1}]]},"Merge":{"main":[[{"node":"Respond to Webhook","type":"main","index":0}]]},"MCP Client":{"ai_tool":[[{"node":"AI Agent","type":"ai_tool","index":0}]]},"Technical Analysis Chart Tool":{"ai_tool":[[{"node":"AI Agent","type":"ai_tool","index":0}]]},"Switch":{"main":[[{"node":"If dcps","type":"main","index":0}],[{"node":"FileLoop","type":"main","index":0}],[{"node":"delete document_metadata","type":"main","index":0}]]},"Hash File":{"main":[[{"node":"DB check existing hashes","type":"main","index":0}]]},"DB check existing hashes":{"main":[[{"node":"Switch","type":"main","index":0}]]},"delete document_metadata":{"main":[[{"node":"delete document vector","type":"main","index":0}]]},"delete document vector":{"main":[[{"node":"If dcps","type":"main","index":0}]]},"FileLoop":{"main":[[],[{"node":"Hash File","type":"main","index":0}]]},"today date and time":{"ai_tool":[[{"node":"AI Agent","type":"ai_tool","index":0}]]},"Prepare fields from query":{"main":[[{"node":"AI Agent","type":"main","index":0},{"node":"Merge","type":"main","index":0}]]},"If audionote":{"main":[[{"node":"Code","type":"main","index":0}],[{"node":"Prepare fields from query","type":"main","index":0}]]},"Convert to File":{"main":[[{"node":"OpenAI","type":"main","index":0}]]},"OpenAI":{"main":[[{"node":"transcribed","type":"main","index":0}]]},"Code":{"main":[[{"node":"Convert to File","type":"main","index":0}]]},"transcribed":{"main":[[{"node":"Prepare fields from query","type":"main","index":0}]]}},"settings":{"executionOrder":"v1","callerPolicy":"workflowsFromSameOwner"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"35be7332-8cb6-45ea-ba00-68b9974b7c45","triggerCount":1,"shared":[{"createdAt":"2025-05-15T16:42:26.851Z","updatedAt":"2025-05-15T16:42:26.851Z","role":"workflow:owner","workflowId":"gkt4U8GXDn2OqXEY","projectId":"gUCywJdvaDilwkpK","project":{"createdAt":"2025-05-15T15:52:32.999Z","updatedAt":"2025-05-15T16:20:44.477Z","id":"gUCywJdvaDilwkpK","name":"Jim Pansen <ealderino@gmail.com>","type":"personal","icon":null,"projectRelations":[{"createdAt":"2025-05-15T15:52:32.999Z","updatedAt":"2025-05-15T15:52:32.999Z","role":"project:personalOwner","userId":"3b494f43-2f28-4391-8aa2-d0b9c44ffc2a","projectId":"gUCywJdvaDilwkpK","user":{"createdAt":"2025-05-15T15:51:26.918Z","updatedAt":"2025-05-15T21:05:21.758Z","id":"3b494f43-2f28-4391-8aa2-d0b9c44ffc2a","email":"ealderino@gmail.com","firstName":"Jim","lastName":"Pansen","personalizationAnswers":null,"settings":{"userActivated":true,"firstSuccessfulWorkflowId":"qRNnienRApKIiDBL","userActivatedAt":1747343115191,"easyAIWorkflowOnboarded":true},"role":"global:owner","disabled":false,"mfaEnabled":false,"isPending":false}}]}}],"tags":[]}